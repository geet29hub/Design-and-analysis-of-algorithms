#include <stdio.h>
				edges[edgeCount].weight = cost[i][j];
				edgeCount++;
			}
		}
	}

	qsort(edges, edgeCount, sizeof(Edge), compareEdges);

	int parent[V], rank[V];
	for (i = 0; i < V; i++) {
		parent[i] = i;
		rank[i] = 0;
	}

	int totalCost = 0;
	int edgesUsed = 0;
	int edgeIndex = 0;

	while (edgesUsed < V -1 && edgeIndex < edgeCount) {
		Edge e = edges[edgeIndex++];
		int set_u = find(parent, e.src);
		int set_v = find(parent, e.dest);

		if (set_u != set_v) {
			printf("Edge %d:(%d, %d) cost:%d\n", edgesUsed, e.src, e.dest, e.weight);
			totalCost += e.weight;
			union1(parent, rank, set_u, set_v);
			edgesUsed++;
		}
	}
	printf("Minimum cost= %d\n", totalCost);
}



int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
